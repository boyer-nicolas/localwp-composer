#!/bin/bash
set -e
source ./bin/messages

REPOSITORY_URL=$(git config --get remote.origin.url)
CLI=""

isGithub() {
    if [[ $REPOSITORY_URL == *"github.com"* ]]; then
        return 0
    else
        return 1
    fi
}

isGitlab() {
    if [[ $REPOSITORY_URL == *"gitlab.com"* ]]; then
        return 0
    else
        return 1
    fi
}

isBitbucket() {
    if [[ $REPOSITORY_URL == *"bitbucket.org"* ]]; then
        return 0
    else
        return 1
    fi
}

if isBitbucket; then
    error "Bitbucket is not supported yet"
    exit 1
fi

generateEnv() {

    if isGithub; then
        # Look for github CLI
        await "Looking for Github CLI..."
        if ! command -v gh &>/dev/null; then
            fail
            warning "Github CLI is not installed. You can improve productivity and security by installing it to generate the .env file. Read more at https://cli.github.com/"
        else
            success
            info "This generator can use the Github CLI to get variables from your repository. Any variable not set in the repository will be prompted to you."
            CLI="gh"
        fi
    fi

    if isGitlab; then
        # Look for gitlab CLI
        await "Looking for Gitlab CLI..."
        if ! command -v glab &>/dev/null; then
            fail
            warning "Gitlab CLI is not installed. You can improve productivity and security by installing it to generate the .env file. Read more at https://gitlab.com/gitlab-org/cli"
        else
            success
            info "This generator can use the Gitlab CLI to get variables from your repository. Any variable not set in the repository will be prompted to you."
            CLI="glab"
        fi
    fi

    # Check if .env exists
    if [ -f .env ]; then
        if demand ".env file already exists. It will be overwritten. Continue ?"; then
            rm .env
        else
            info "Aborting."
            exit 1
        fi
    fi

    # Check if .env.example exists
    if [ ! -f .env.example ]; then
        error ".env.example file does not exist. Aborting."
        exit 1
    fi

    # Check if .env.example is empty
    if [ ! -s .env.example ]; then
        error ".env.example file is empty. Aborting."
        exit 1
    fi

    # Get required variables
    await "Getting required variables..."
    REQUIRED_VARIABLES=$(grep -E "^[A-Z_]+=" .env.example | sed -E "s/([A-Z_]+)=.*/\1/g")
    success

    # Look for variables in repository
    if [[ $CLI == "glab" ]]; then

        await "Getting variables from repository and setting them in .env..."
        for VARIABLE in $REQUIRED_VARIABLES; do
            if [[ $(glab variable get $VARIABLE) != "" ]]; then
                echo "$VARIABLE=$(glab variable get $VARIABLE$VARIABLE)" >>.env
            fi
        done
        success

    elif [[ $CLI == "gh" ]]; then
        await "Getting variables from repository..."
        GH_VARIABLES=$(gh variable list)
        success

        MISSING_VARIABLES=""
        UNREQUIRED_VARIABLES="AUTH_KEY SECURE_AUTH_KEY LOGGED_IN_KEY NONCE_KEY AUTH_SALT SECURE_AUTH_SALT LOGGED_IN_SALT NONCE_SALT WP_ENV"
        info "Setting variables in .env..."
        echo "# This file is generated by the env generator. Do not edit it manually." >>.env
        for VARIABLE in $REQUIRED_VARIABLES; do
            # Check if variable is in unrequired variables
            if [[ $(echo $UNREQUIRED_VARIABLES | grep $VARIABLE) != "" ]]; then
                continue
            else
                if [[ $(echo $GH_VARIABLES | grep $VARIABLE) != "" ]]; then
                    # Date format example to remove: 2023-05-23T10:05:30Z
                    DATE_TO_REMOVE_REGEX="[0-9]{4}-[0-9]{2}-[0-9]{2}T[0-9]{2}:[0-9]{1,2}:[0-9]{1,2}Z"
                    RETRIEVED_VARIABLE=$(gh variable list | grep -w $VARIABLE | sed -E "s/$VARIABLE//g" | sed -E "s/$DATE_TO_REMOVE_REGEX//g" | tr " " "*" | tr "\t" "&" | sed -E "s/\*//g" | sed -E "s/&//g")
                    info "Inserting $VARIABLE"
                    echo "$VARIABLE=\"$RETRIEVED_VARIABLE\"" >>.env
                else
                    MISSING_VARIABLES="$MISSING_VARIABLES $VARIABLE"
                fi
            fi
        done

        if [[ $MISSING_VARIABLES != "" ]]; then
            softFail
            warning "The following variables are missing from your repository:"
            for VARIABLE in $MISSING_VARIABLES; do
                warning "$VARIABLE"
            done
            info "You will be prompted to enter them manually."

            for VARIABLE in $MISSING_VARIABLES; do
                # Look for comments next to the variable in the .env.example to provide a hint
                VARIABLE_LOWER=$(echo $VARIABLE | tr '[:upper:]' '[:lower:]')
                VARIABLE_HINT=$(grep -E "^$VARIABLE=" .env.example | sed -E "s/$VARIABLE=//g" | sed -E "s/'$VARIABLE_LOWER'//g" | sed -E "s/#//g" | sed -E "s/\"//g" | tr " " "*" | tr "\t" "&" | sed -E "s/\*//g" | sed -E "s/&//g")

                # Prompt user for variable
                if [[ $VARIABLE_HINT != "" ]]; then
                    await "Please provide a value for $VARIABLE (Hint: $VARIABLE_HINT) "

                else
                    await "Please provide a value for $VARIABLE "
                fi

                # Check if variable name includes "password" to hide input
                if [[ $VARIABLE == *"PASSWORD"* ]]; then
                    read -se VARIABLE_VALUE
                    echo ""
                else
                    read -e VARIABLE_VALUE
                fi

                echo "$VARIABLE=\"$VARIABLE_VALUE\"" >>.env

                info "Setting $VARIABLE in repository..."
                gh variable set $VARIABLE --body "$VARIABLE_VALUE"
            done
        else
            success
        fi
    fi

    # Run env generator to get random strings & secure hashes
    info "Generating random strings and secure hashes..."
    php bin/env-generator.php generate

    # Get WP_ENV
    echo ""
    await "Please provide a value for WP_ENV (development, staging, production) "
    read -e WP_ENV

    # Set WP_ENV
    echo -e "\nWP_ENV=\"$WP_ENV\"" >>.env
}

uploadEnv() {
    DOTENV_CONTENTS=$(cat .env)

    # Remove comments
    DOTENV_CONTENTS=$(echo "$DOTENV_CONTENTS" | grep -v "^#")

    # Remove empty lines
    DOTENV_CONTENTS=$(echo "$DOTENV_CONTENTS" | grep -v "^$")

    if isGitlab; then
        await "Uploading .env to Gitlab..."
        for VARIABLE in $DOTENV_CONTENTS; do
            # Disect variable
            VARIABLE_NAME=$(echo $VARIABLE | sed -E "s/([A-Z_]+)=.*/\1/g")
            VARIABLE_VALUE=$(echo $VARIABLE | sed -E "s/[A-Z_]+=(.*)/\1/g")
            if [[ $VARIABLE_NAME != "" ]]; then
                if [[ $(glab variable get $VARIABLE_NAME) != "" ]]; then
                    glab variable update $VARIABLE_NAME "$VARIABLE_VALUE"
                else
                    glab variable set $VARIABLE_NAME "$VARIABLE_VALUE"
                fi
            fi
            i=$((i + 1))
        done
        success
    fi

    if isGithub; then
        await "Uploading .env to Github..."
        for VARIABLE in $DOTENV_CONTENTS; do
            # Disect variable
            VARIABLE_NAME=$(echo $VARIABLE | sed -E "s/([A-Z_]+)=.*/\1/g")
            VARIABLE_VALUE=$(echo $VARIABLE | sed -E "s/[A-Z_]+=(.*)/\1/g")
            if [[ $VARIABLE_NAME != "" ]]; then
                gh variable set $VARIABLE_NAME --body "$VARIABLE_VALUE"
            fi
            i=$((i + 1))
        done
        success
    fi
}

# Router
# Router
case "$1" in
generate)
    generateEnv
    ;;
upload)
    uploadEnv
    ;;
*)
    info "Usage: $0 {import|dump|backup}"
    exit 1
    ;;
esac
